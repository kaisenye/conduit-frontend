import { useState, useEffect } from 'react'
import { useMessages, useUserData } from '../services/api'
import { useSocket } from '../hooks/useSocket'

export function Chat({ conversation, currentUserRole }) {
  const { data: userData, isLoading: isUserLoading, error: userError } = useUserData(currentUserRole)
  const [message, setMessage] = useState('')
  const { data: messages, isLoading: isMessagesLoading, error: messagesError, refetch } = useMessages(conversation?.id)
  const { socket, sendMessage, isSending, error: socketError } = useSocket(conversation?.id)

  useEffect(() => {
    if (conversation?.id) {
      // Listen for new messages
      socket.on('new_message', (newMessage) => {
        refetch();
      });
      
      // Listen for message updates (e.g., when LLM adds intent/suggested reply)
      socket.on('message_updated', (updatedMessage) => {
        refetch();
      });
      
      // Cleanup on unmount
      return () => {
        socket.off('new_message');
        socket.off('message_updated');
      };
    }
  }, [conversation?.id, refetch, socket]);

  const handleSubmit = async (e) => {
    e.preventDefault()
    if (!message.trim() || !conversation?.id || !userData?.id) return
    
    try {
      await sendMessage({
        conversationId: conversation.id,
        senderId: userData?.id, // Use the actual user ID
        senderRole: currentUserRole,
        body: message
      });
      
      setMessage('')
    } catch (error) {
      console.error('Error sending message:', error)
      // The error will be displayed through the socketError state
    }
  }

  const isCurrentUserMessage = (message) => {
    return message.sender?.role === currentUserRole
  }

  if (!conversation) {
    return (
      <div className="flex items-center justify-center h-full text-muted-foreground">
        Select a conversation to start chatting
      </div>
    )
  }

  if (isUserLoading || isMessagesLoading) {
    return (
      <div className="flex items-center justify-center h-full text-muted-foreground">
        Loading messages...
      </div>
    )
  }

  if (messagesError || socketError || userError) {
    return (
      <div className="flex items-center justify-center h-full text-destructive">
        {messagesError?.message || socketError || userError?.message || 'Error loading messages'}
      </div>
    )
  }

  return (
    <div className="flex flex-col h-screen">
      <div className="border-b p-4 bg-white">
        <h2 className="text-lg font-semibold">{conversation.recipient.name}</h2>
      </div>

      <div className="flex-1 overflow-y-auto p-8 space-y-4 bg-white">
        {messages?.map(msg => (
          <div
            key={msg.id}
            className={`flex ${isCurrentUserMessage(msg) ? 'justify-end' : 'justify-start'}`}
          >
            <div
              className={`max-w-[50%] rounded-lg p-3 ${
                isCurrentUserMessage(msg)
                  ? 'bg-neutral-700 text-white'
                  : 'bg-neutral-100 text-gray-800'
              }`}
            >
              <div className="text-base">{msg.body}</div>
              {msg.intent && currentUserRole === 'BUSINESS' && (
                <div className="text-xs mt-1 opacity-70">
                  Intent: {msg.intent}
                </div>
              )}
              {msg.nextStep && currentUserRole === 'BUSINESS' && (
                <div className="text-xs mt-1 opacity-70">
                  Next Step: {msg.nextStep}
                </div>
              )}
              <div className="text-xs mt-1 opacity-70">
                {new Date(msg.createdAt).toLocaleString()}
              </div>
              {msg.isAutomated && currentUserRole === 'BUSINESS' && (
                <div className="w-fit text-xs mt-2 opacity-70 text-neutral-700 bg-neutral-100 rounded-md p-1">
                  Generated by LLM
                </div>
              )}
            </div>
          </div>
        ))}
      </div>

      {socketError && (
        <div className="p-2 bg-red-100 text-red-700 text-sm">
          {socketError}
        </div>
      )}

      <form onSubmit={handleSubmit} className="border-t px-4 pt-4 pb-16 bg-white">
        <div className="flex gap-2">
          <input
            type="text"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            placeholder="Type your message..."
            disabled={isSending}
            className="flex-1 p-2 rounded-md border bg-background focus:outline-none focus:ring-1 focus:ring-neutral-300 transition-all duration-200 disabled:opacity-50"
          />
          <button
            type="submit"
            disabled={isSending || !message.trim() || !userData?.id}
            className="px-8 py-2 bg-neutral-700 text-white rounded-md hover:bg-neutral-800 focus:outline-none focus:ring-1 focus:ring-neutral-300 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isSending ? 'Sending...' : 'Send'}
          </button>
        </div>
      </form>
    </div>
  )
} 